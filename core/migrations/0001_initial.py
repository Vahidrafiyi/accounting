# Generated by Django 4.2.7 on 2023-11-19 20:00

import core.managers
import core.models
from django.conf import settings
import django.contrib.auth.validators
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('phone', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator('^\\d{1,10}$')], verbose_name='phone')),
                ('address', models.TextField(blank=True, max_length=1000, null=True, verbose_name='address')),
                ('image', models.ImageField(null=True, upload_to=core.models.user_image_directory, verbose_name='image')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
            ],
            options={
                'abstract': False,
            },
            managers=[
                ('objects', core.managers.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('account_title', models.CharField(max_length=200, verbose_name='account title')),
                ('bank_name', models.CharField(max_length=200, verbose_name='bank name')),
                ('account_number', models.TextField(blank=True, max_length=50, verbose_name='account number')),
                ('card_number', models.TextField(blank=True, max_length=50, verbose_name='card number')),
                ('shaba_number', models.TextField(blank=True, max_length=50, verbose_name='shaba number')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('received_money', models.FloatField(blank=True, default=0, null=True, verbose_name='received money')),
                ('paid_money', models.FloatField(blank=True, default=0, null=True, verbose_name='paid money')),
                ('balance', models.FloatField(blank=True, default=0, null=True, verbose_name='balance')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'ordering': ['-account_title'],
            },
        ),
        migrations.CreateModel(
            name='AccountSide',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('name', models.CharField(blank=True, max_length=200, null=True, verbose_name='name')),
                ('phone', models.CharField(blank=True, max_length=12, null=True, verbose_name='phone')),
                ('is_natural_person', models.BooleanField(default=True, help_text='طرف حساب شخصی حقیقی است؟', verbose_name='natural person?')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('received_money', models.FloatField(blank=True, default=0, null=True, verbose_name='received money')),
                ('paid_money', models.FloatField(blank=True, default=0, null=True, verbose_name='paid money')),
                ('balance', models.FloatField(blank=True, default=0, help_text='باقی مانده', null=True, verbose_name='balance')),
            ],
            options={
                'ordering': ['-name'],
            },
        ),
        migrations.CreateModel(
            name='Role',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('title', models.CharField(max_length=40, verbose_name='title')),
                ('revoke_token', models.BooleanField(default=False, verbose_name='revoke token')),
                ('create_user', models.BooleanField(default=False, verbose_name='create user')),
                ('list_user', models.BooleanField(default=False, verbose_name='list user')),
                ('retrieve_user', models.BooleanField(default=False, verbose_name='retrieve user')),
                ('update_user', models.BooleanField(default=False, verbose_name='update user')),
                ('destroy_user', models.BooleanField(default=False, verbose_name='destroy user')),
                ('create_role', models.BooleanField(default=False, verbose_name='create role')),
                ('list_role', models.BooleanField(default=False, verbose_name='list role')),
                ('retrieve_role', models.BooleanField(default=False, verbose_name='retrieve role')),
                ('update_role', models.BooleanField(default=False, verbose_name='update role')),
                ('destroy_role', models.BooleanField(default=False, verbose_name='destroy role')),
                ('create_account', models.BooleanField(default=False, verbose_name='create account')),
                ('list_account', models.BooleanField(default=False, verbose_name='list account')),
                ('retrieve_account', models.BooleanField(default=False, verbose_name='retrieve account')),
                ('update_account', models.BooleanField(default=False, verbose_name='update account')),
                ('destroy_account', models.BooleanField(default=False, verbose_name='destroy account')),
                ('create_accountside_category', models.BooleanField(default=False, verbose_name='create accountside_category')),
                ('list_accountside_category', models.BooleanField(default=False, verbose_name='list accountside_category')),
                ('retrieve_accountside_category', models.BooleanField(default=False, verbose_name='retrieve accountside_category')),
                ('update_accountside_category', models.BooleanField(default=False, verbose_name='update accountside_category')),
                ('destroy_accountside_category', models.BooleanField(default=False, verbose_name='destroy accountside_category')),
                ('create_accountside', models.BooleanField(default=False, verbose_name='create accountside')),
                ('list_accountside', models.BooleanField(default=False, verbose_name='list accountside')),
                ('retrieve_accountside', models.BooleanField(default=False, verbose_name='retrieve accountside')),
                ('update_accountside', models.BooleanField(default=False, verbose_name='update accountside')),
                ('destroy_accountside', models.BooleanField(default=False, verbose_name='destroy accountside')),
                ('create_expense', models.BooleanField(default=False, verbose_name='create expense')),
                ('list_expense', models.BooleanField(default=False, verbose_name='list expense')),
                ('retrieve_expense', models.BooleanField(default=False, verbose_name='retrieve expense')),
                ('update_expense', models.BooleanField(default=False, verbose_name='update expense')),
                ('destroy_expense', models.BooleanField(default=False, verbose_name='destroy expense')),
                ('create_note', models.BooleanField(default=False, verbose_name='create note')),
                ('list_note', models.BooleanField(default=False, verbose_name='list note')),
                ('retrieve_note', models.BooleanField(default=False, verbose_name='retrieve note')),
                ('update_note', models.BooleanField(default=False, verbose_name='update note')),
                ('destroy_note', models.BooleanField(default=False, verbose_name='destroy note')),
                ('create_subject_category', models.BooleanField(default=False, verbose_name='create subject_category')),
                ('list_subject_category', models.BooleanField(default=False, verbose_name='list subject_category')),
                ('retrieve_subject_category', models.BooleanField(default=False, verbose_name='retrieve subject_category')),
                ('update_subject_category', models.BooleanField(default=False, verbose_name='update subject_category')),
                ('destroy_subject_category', models.BooleanField(default=False, verbose_name='destroy subject_category')),
                ('create_subject', models.BooleanField(default=False, verbose_name='create subject')),
                ('list_subject', models.BooleanField(default=False, verbose_name='list subject')),
                ('retrieve_subject', models.BooleanField(default=False, verbose_name='retrieve subject')),
                ('update_subject', models.BooleanField(default=False, verbose_name='update subject')),
                ('destroy_subject', models.BooleanField(default=False, verbose_name='destroy subject')),
                ('create_workspace', models.BooleanField(default=False, verbose_name='create workspace')),
                ('list_workspace', models.BooleanField(default=False, verbose_name='list workspace')),
                ('retrieve_workspace', models.BooleanField(default=False, verbose_name='retrieve workspace')),
                ('update_workspace', models.BooleanField(default=False, verbose_name='update workspace')),
                ('destroy_workspace', models.BooleanField(default=False, verbose_name='destroy workspace')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='WorkSpace',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('received_money', models.FloatField(blank=True, default=0, null=True, verbose_name='received money')),
                ('paid_money', models.FloatField(blank=True, default=0, null=True, verbose_name='paid money')),
                ('balance', models.FloatField(blank=True, default=0, null=True, verbose_name='balance')),
                ('accountside', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workspace_tarafhesab', to='core.accountside', verbose_name='accountside')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='workspace_user', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'ordering': ['-accountside'],
            },
        ),
        migrations.CreateModel(
            name='SubjectCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'verbose_name_plural': 'subject categories',
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('title', models.CharField(blank=True, max_length=200, null=True, verbose_name='title')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category_topics', to='core.subjectcategory', verbose_name='category')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_topics', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('title', models.CharField(max_length=400, verbose_name='title')),
                ('description', models.TextField(max_length=10000, verbose_name='description')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_notes', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'ordering': ['-title'],
            },
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('date_time', models.DateTimeField(verbose_name='date time')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('price', models.IntegerField(verbose_name='price')),
                ('image', models.ImageField(blank=True, null=True, upload_to='factors/', verbose_name='image')),
                ('is_received_money', models.BooleanField(default=False, verbose_name='is received money')),
                ('description', models.TextField(blank=True, max_length=1000, verbose_name='description')),
                ('account', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='account_expenses', to='core.account', verbose_name='account')),
                ('accountside', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accountside_expenses', to='core.accountside', verbose_name='accountside')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='user_expenses', to=settings.AUTH_USER_MODEL, verbose_name='owner')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='subject_expenses', to='core.subject', verbose_name='subject')),
                ('workspace', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='workspace_expenses', to='core.workspace', verbose_name='workspace')),
            ],
            options={
                'ordering': ['-date_time'],
            },
        ),
        migrations.CreateModel(
            name='AccountSideCategory',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False, verbose_name='id')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='created at')),
                ('is_deleted', models.BooleanField(default=False, verbose_name='is deleted?')),
                ('title', models.CharField(max_length=200, verbose_name='title')),
                ('description', models.TextField(blank=True, max_length=1000, null=True, verbose_name='description')),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL, verbose_name='owner')),
            ],
            options={
                'verbose_name_plural': 'accountside categories',
                'ordering': ['-title'],
            },
        ),
        migrations.AddField(
            model_name='accountside',
            name='category',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accountsides', to='core.accountsidecategory', verbose_name='category'),
        ),
        migrations.AddField(
            model_name='accountside',
            name='owner',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='accountside_user', to=settings.AUTH_USER_MODEL, verbose_name='owner'),
        ),
        migrations.AddField(
            model_name='user',
            name='role',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='users', to='core.role', verbose_name='permissions'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
    ]
